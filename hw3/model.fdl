ipblock myarm {
	iptype "armsystem";
	ipparm "exec=main";
}

ipblock req_input_port(out data : ns(32)) {
	iptype "armsystemsource";
	ipparm "core=myarm";
	ipparm "address=0x80000000";
}

ipblock ack_input_port(in data : ns(32)) {
	iptype "armsystemsink";
	ipparm "core=myarm";
	ipparm "address=0x80000010";
}


ipblock p(out data : ns(32)) {
	iptype "armsystemsource";
	ipparm "core=myarm";
	ipparm "address=0x80000020";
}

ipblock q(out data : ns(32)) {
	iptype "armsystemsource";
	ipparm "core=myarm";
	ipparm "address=0x80000030";
}

ipblock e(out data : ns(32)) {
	iptype "armsystemsource";
	ipparm "core=myarm";
	ipparm "address=0x80000040";
}

ipblock d(out data : ns(32)) {
	iptype "armsystemsource";
	ipparm "core=myarm";
	ipparm "address=0x80000050";
}

ipblock m(out data : ns(32)) {
	iptype "armsystemsource";
	ipparm "core=myarm";
	ipparm "address=0x80000060";
}

ipblock encrypted_data_output_port(in data : ns(32)) {
	iptype "armsystemsink";
	ipparm "core=myarm";
	ipparm "address=0x80000070";
}

ipblock decrypted_data_output_port(in data : ns(32)) {
	iptype "armsystemsink";
	ipparm "core=myarm";
	ipparm "address=0x80000080";
}


dp RSA_encryptor_decryptor {
	use myarm;
	
	// initialize signals
	sig req_sig , ack_sig : ns(32);
	sig encrypted_sig , decrypted_sig : ns(32);
	sig p_sig, q_sig, e_sig, d_sig, m_sig : ns(32);
	// connect signals to inputs
	use req_input_port(req_sig);
	use ack_input_port(ack_sig);
	use p(p_sig);
	use q(q_sig);
	use e(e_sig);
	use d(d_sig);
	use m(m_sig);
	use encrypted_data_output_port(encrypted_sig);
	use decrypted_data_output_port(decrypted_sig);
	
	// initialize registers
	reg encrypted_reg , decrypted_reg : ns(32);
	reg current_request_reg , done_reg , modulo_reg : ns(1);

	reg x, y, p, q, e, d, n, z : ns(32);
	reg message , cipher , plaint : ns(32);

	always{
		current_request_reg = req_sig;
		encrypted_sig = encrypted_reg;
		decrypted_sig = decrypted_reg;
	}

	//// set acknowledges signals

	sfg ack1 {
		ack_sig = 1;
	}

	sfg ack2 {
		ack_sig = 2;
	}

	sfg ack3 {
		ack_sig = 3;
	}

	//// read data from inputs

	sfg data_reader {
		p = p_sig;
		q = q_sig;
		e = e_sig; 
		d = d_sig;
		message = m_sig;
		done_reg = 0;
		$display("HARDWARE----> get data from software ", " p:", p, " q:", q, " e:", e, " d:", d, " msg:", message);
	}

	//// calculations
	sfg calculate_n_and_z {
		n = p * q;
		z = ( p - 1 ) * ( q - 1 );

		$display("HARDWARE----> calculate n and z", " n:", n, " z:", z);
		$display($dec);
	}
	sfg initialize_for_start {
		x = e;
		y = z;
	}
	sfg calculate_gcd {
		done_reg = ( (x == 0) | (y == 0) );
		encrypted_reg = x > y ? x : y;
		x = x > y ? x - y : x;
		y = y >= x ? y - x : y;

		$display("HARDWARE----> calculate gcd", " x:", x, " y:", y);
	}
	sfg check_encrypted_reg {
		done_reg = encrypted_reg == 1 ? 1 : 0 ;
	}
	sfg increment1 {
		x = e + 1;
		y = z;
		e = e + 1;
	}
	sfg initialize_for_after_start {
		x = d * e;
		y = z;
	}
	sfg calculate_x {
		done_reg = x < y ? 1 : 0;
		x = x >= y ? x - y : x;

		$display("HARDWARE----> calculate x", " x:", x);
	}
	sfg check_done_reg {
		done_reg = x == 1 ? 1 : 0 ; 
	}
	sfg increment2 {
		x = ( d + 1 ) * e;
		y = z;
		d = d + 1;
	}

	//// encryption

	sfg initialize_for_encryption {
		x = 1;
		y = e - 1;
	}

	sfg encrypter {
		done_reg = y == 0 ? 1 : 0;
		x = x * message;
		y = y - 1;

		$display("HARDWARE----> encryption", " x:", x, " y:", y);
	}

	sfg loop_for_module {
		x = x >= n ? x - n : x;
		modulo_reg = x > n ? 0 : 1;
	}

	sfg set_cipher_reg {
		cipher = x;
	}

	sfg set_encrypted_reg {
		encrypted_reg = cipher;
	}


	//// decryption

	sfg initialize_for_decryption {
		x = 1;
		y = d-1;
		modulo_reg = 0;
		done_reg = 0;
	}

	sfg decrypter {
		done_reg = y == 0 ? 1 : 0;
		x = x * cipher;
		y = y - 1;

		$display("HARDWARE----> doing_decryption", " x:", x, " y:", y);
	}

	sfg set_plaint_reg {
		plaint = x;
	}

	sfg set_decrypted_reg{
		decrypted_reg = plaint; 
	}
}

fsm rsaController(RSA_encryptor_decryptor){
	initial s1;
	state 	s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24;
	@s1 if(current_request_reg) then (data_reader, ack2) -> s2;
	else (ack1) ->s1;
	@s2 (calculate_n_and_z, ack2) -> s3;
	@s3 (initialize_for_start, ack2) -> s4;
	@s4 (calculate_gcd, ack2) -> s5;
	@s5 if(done_reg) then (check_encrypted_reg, ack2) -> s6;
	else (calculate_gcd, ack2) -> s5;
	@s6 if(~done_reg) then (increment1, ack2) -> s4;
	else (ack2) -> s7;
	@s7 (initialize_for_after_start, ack2) -> s8;
	@s8 (calculate_x, ack2) -> s9;
	@s9 if(done_reg) then (check_done_reg, ack2) -> s10;
	else (calculate_x, ack2) -> s9;
	@s10 if(~done_reg) then (increment2, ack2) -> s8;
	else (ack2) -> s11;
	@s11 (ack2) -> s12;
	@s12 (initialize_for_encryption, ack2) -> s13;
	@s13 (encrypter, ack2) -> s14;
	@s14 (loop_for_module, ack2) -> s15;
	@s15 if(modulo_reg) then (ack2) -> s16;
	else (ack2) -> s14;
	@s16 if(done_reg) then (set_cipher_reg, ack2) -> s17;
	else (ack2) -> s13;
	@s17 (set_encrypted_reg, ack2) -> s18;
	@s18 (initialize_for_decryption, ack2) -> s19;
	@s19 (decrypter, ack2) -> s20;
	@s20 (loop_for_module, ack2) -> s21;
	@s21 if(modulo_reg) then (ack2) -> s22;
	else (ack2) -> s20;
	@s22  if(done_reg) then (set_plaint_reg, ack2) -> s23;
	else (ack2) -> s19;
	@s23 (ack3, set_decrypted_reg) -> s24;
	@s24 (ack3) -> s24;
}

system S {
	RSA_encryptor_decryptor;
}
