ipblock myarm {
	iptype "armsystem";
	ipparm "exec=main";
}

ipblock req_m(out data : ns(32)) {
	iptype "armsystemsource";
	ipparm "core=myarm";
	ipparm "address=0x80000000";
}

ipblock ack_m(in data : ns(32)) {
	iptype "armsystemsink";
	ipparm "core=myarm";
	ipparm "address=0x80000004";
}


ipblock input_0(out data : tc(32)) {
	iptype "armsystemsource";
	ipparm "core=myarm";
	ipparm "address=0x80000008";
}
ipblock input_1(out data : tc(32)) {
	iptype "armsystemsource";
	ipparm "core=myarm";
	ipparm "address=0x8000000c";
}
ipblock input_2(out data : tc(32)) {
	iptype "armsystemsource";
	ipparm "core=myarm";
	ipparm "address=0x80000010";
}
ipblock input_3(out data : tc(32)) {
	iptype "armsystemsource";
	ipparm "core=myarm";
	ipparm "address=0x80000014";
}
ipblock input_4(out data : tc(32)) {
	iptype "armsystemsource";
	ipparm "core=myarm";
	ipparm "address=0x80000018";
}
ipblock input_5(out data : tc(32)) {
	iptype "armsystemsource";
	ipparm "core=myarm";
	ipparm "address=0x8000001c";
}
ipblock input_6(out data : tc(32)) {
	iptype "armsystemsource";
	ipparm "core=myarm";
	ipparm "address=0x80000020";
}
ipblock input_7(out data : tc(32)) {
	iptype "armsystemsource";
	ipparm "core=myarm";
	ipparm "address=0x80000024";
}

ipblock output_0(in data : tc(32)) {
	iptype "armsystemsink";
	ipparm "core=myarm";
	ipparm "address=0x80000028";
}
ipblock output_1(in data : tc(32)) {
	iptype "armsystemsink";
	ipparm "core=myarm";
	ipparm "address=0x8000002c";
}
ipblock output_2(in data : tc(32)) {
	iptype "armsystemsink";
	ipparm "core=myarm";
	ipparm "address=0x80000030";
}
ipblock output_3(in data : tc(32)) {
	iptype "armsystemsink";
	ipparm "core=myarm";
	ipparm "address=0x80000034";
}
ipblock output_4(in data : tc(32)) {
	iptype "armsystemsink";
	ipparm "core=myarm";
	ipparm "address=0x80000038";
}
ipblock output_5(in data : tc(32)) {
	iptype "armsystemsink";
	ipparm "core=myarm";
	ipparm "address=0x8000003c";
}
ipblock output_6(in data : tc(32)) {
	iptype "armsystemsink";
	ipparm "core=myarm";
	ipparm "address=0x80000040";
}
ipblock output_7(in data : tc(32)) {
	iptype "armsystemsink";
	ipparm "core=myarm";
	ipparm "address=0x80000044";
}



dp fft_dp{
    use myarm;

    sig req_sig , ack_sig : ns(32);
    sig i0_sig, i1_sig, i2_sig, i3_sig, i4_sig, i5_sig, i6_sig, i7_sig : tc(32);
    sig o0_sig, o1_sig, o2_sig, o3_sig, o4_sig, o5_sig, o6_sig, o7_sig : tc(32);
	

    reg ack_reg, req_reg : ns(32);
    reg x0_reg, x1_reg, x2_reg, x3_reg, x4_reg, x5_reg, x6_reg, x7_reg : tc(32);
    reg y0_reg, y1_reg, y2_reg, y3_reg, y4_reg, y5_reg, y6_reg, y7_reg : tc(32);
    reg o0_reg, o1_reg, o2_reg, o3_reg, o4_reg, o5_reg, o6_reg, o7_reg : tc(32);
    // reg o0_reg, o1_reg, o2_reg, o3_reg, o4_reg, o5_reg, o6_reg, o7_reg : tc(32);
    sig t1,t2 : tc(32);
    reg u1,u2 : tc(32);

    use req_m(req_sig);
    use ack_m(ack_sig);

    use input_0(i0_sig);
    use input_1(i1_sig);
    use input_2(i2_sig);
    use input_3(i3_sig);
    use input_4(i4_sig);
    use input_5(i5_sig);
    use input_6(i6_sig);
    use input_7(i7_sig);

    use output_0(o0_sig);
    use output_1(o1_sig);
    use output_2(o2_sig);
    use output_3(o3_sig);
    use output_4(o4_sig);
    use output_5(o5_sig);
    use output_6(o6_sig);
    use output_7(o7_sig);

    always{
        req_reg = req_sig;
        o0_sig = o0_reg;
        o1_sig = o1_reg;
        o2_sig = o2_reg;
        o3_sig = o3_reg;
        o4_sig = o4_reg;
        o5_sig = o5_reg;
        o6_sig = o6_reg;
        o7_sig = o7_reg;
        ack_sig = ack_reg;
    }



    sfg ack0{
        ack_reg = 0;
    }

    sfg ack1{
        ack_reg = 1;
    }
    
    sfg ack2{
        ack_reg = 2;
    }

    sfg ack3{
        ack_reg = 3;
    }

    sfg ack4{
        ack_reg = 4;
    }

    sfg ack5{
        ack_reg = 5;
    }

    sfg ack6{
        ack_reg = 6;
    }

    sfg ack7{
        ack_reg = 7;
    }

    sfg ack8{
        ack_reg = 8;
    }

    sfg ack9{
        ack_reg = 9;
    }

    sfg ack10{
        ack_reg = 10;
    }
    
    sfg ack11{
        ack_reg = 11;
    }

    sfg ack12{
        ack_reg = 12;
    }

    sfg read_x{
        x0_reg = i0_sig;
        x1_reg = i1_sig;
        x2_reg = i2_sig;
        x3_reg = i3_sig;
        x4_reg = i4_sig;
        x5_reg = i5_sig;
        x6_reg = i6_sig;
        x7_reg = i7_sig;
        $display("X readed completely");
        $display("x0=", x0_reg, " x1=", x1_reg, " x2=", x2_reg, "x3=", x3_reg, " x4=", x4_reg, " x5=", x5_reg, "x6=" ,x6_reg, " x7=", x7_reg);
    }

    sfg read_y{
        y0_reg = i0_sig;
        y1_reg = i1_sig;
        y2_reg = i2_sig;
        y3_reg = i3_sig;
        y4_reg = i4_sig;
        y5_reg = i5_sig;
        y6_reg = i6_sig;
        y7_reg = i7_sig;
        $display("Y readed completely");
        $display("y0=", y0_reg, " y1=", y1_reg, " y2=", y2_reg, "y3=", y3_reg, " y4=", y4_reg, " y5=", y5_reg, "y6=" ,y6_reg, " y7=", y7_reg);
    }

    sfg sort{
        
        x1_reg = x4_reg;
        x3_reg = x6_reg;
        x4_reg = x1_reg;
        x6_reg = x3_reg;
        
        y1_reg = y4_reg;
        y3_reg = y6_reg;
        y4_reg = y1_reg;
        y6_reg = y3_reg;
        
        $display("sort done completely");
        

        $display("x0=", x0_reg, " x1=", x1_reg, " x2=", x2_reg, "x3=", x3_reg, " x4=", x4_reg, " x5=", x5_reg, "x6=" ,x6_reg, " x7=", x7_reg);
        $display("y0=", y0_reg, " y1=", y1_reg, " y2=", y2_reg, "y3=", y3_reg, " y4=", y4_reg, " y5=", y5_reg, "y6=" ,y6_reg, " y7=", y7_reg);

    }

    sfg loop_000{
        t1 = (u1 * x1_reg - u2 * y1_reg) >> 6;
        t2 = (u1 * y1_reg + u2 * x1_reg) >> 6;
        x1_reg = x0_reg - t1;
        y1_reg = y0_reg - t2;
        x0_reg = x0_reg + t1;
        y0_reg = y0_reg + t2;
    }
    sfg loop_002{
        t1 = (u1 * x3_reg - u2 * y3_reg) >> 6;
        t2 = (u1 * y3_reg + u2 * x3_reg) >> 6;
        x3_reg = x2_reg - t1;
        y3_reg = y2_reg - t2;
        x2_reg = x2_reg + t1;
        y2_reg = y2_reg + t2;
    }
    sfg loop_004{
        t1 = (u1 * x5_reg - u2 * y5_reg) >> 6;
        t2 = (u1 * y5_reg + u2 * x5_reg) >> 6;
        x5_reg = x4_reg - t1;
        y5_reg = y4_reg - t2;
        x4_reg = x4_reg + t1;
        y4_reg = y4_reg + t2;
    }
    sfg loop_006{
        t1 = (u1 * x7_reg - u2 * y7_reg) >> 6;
        t2 = (u1 * y7_reg + u2 * x7_reg) >> 6;
        x7_reg = x6_reg - t1;
        y7_reg = y6_reg - t2;
        x6_reg = x6_reg + t1;
        y6_reg = y6_reg + t2;
    }
    sfg loop_100{
        t1 = (u1 * x2_reg - u2 * y2_reg) >> 6;
        t2 = (u1 * y2_reg + u2 * x2_reg) >> 6;
        x2_reg = x0_reg - t1;
        y2_reg = y0_reg - t2;
        x0_reg = x0_reg + t1;
        y0_reg = y0_reg + t2;
    }
    sfg loop_104{
        t1 = (u1 * x6_reg - u2 * y6_reg) >> 6;
        t2 = (u1 * y6_reg + u2 * x6_reg) >> 6;
        x6_reg = x4_reg - t1;
        y6_reg = y4_reg - t2;
        x4_reg = x4_reg + t1;
        y4_reg = y4_reg + t2;
    }
    sfg loop_111{
        t1 = (u1 * x3_reg - u2 * y3_reg) >> 6;
        t2 = (u1 * y3_reg + u2 * x3_reg) >> 6;
        x3_reg = x1_reg - t1;
        y3_reg = y1_reg - t2;
        x1_reg = x1_reg + t1;
        y1_reg = y1_reg + t2;
    }
    sfg loop_115{
        t1 = (u1 * x7_reg - u2 * y7_reg) >> 6;
        t2 = (u1 * y7_reg + u2 * x7_reg) >> 6;
        x7_reg = x5_reg - t1;
        y7_reg = y5_reg - t2;
        x5_reg = x5_reg + t1;
        y5_reg = y5_reg + t2;
    }
    sfg loop_200{
        t1 = (u1 * x4_reg - u2 * y4_reg) >> 6;
        t2 = (u1 * y4_reg + u2 * x4_reg) >> 6;
        x4_reg = x0_reg - t1;
        y4_reg = y0_reg - t2;
        x0_reg = x0_reg + t1;
        y0_reg = y0_reg + t2;
    }
    sfg loop_211{
        t1 = (u1 * x5_reg - u2 * y5_reg) >> 6;
        t2 = (u1 * y5_reg + u2 * x5_reg) >> 6;
        x5_reg = x1_reg - t1;
        y5_reg = y1_reg - t2;
        x1_reg = x1_reg + t1;
        y1_reg = y1_reg + t2;
    }
    sfg loop_222{
        t1 = (u1 * x6_reg - u2 * y6_reg) >> 6;
        t2 = (u1 * y6_reg + u2 * x6_reg) >> 6;
        x6_reg = x2_reg - t1;
        y6_reg = y2_reg - t2;
        x2_reg = x2_reg + t1;
        y2_reg = y2_reg + t2;
    }
    sfg loop_233{
        t1 = (u1 * x7_reg - u2 * y7_reg) >> 6;
        t2 = (u1 * y7_reg + u2 * x7_reg) >> 6;
        x7_reg = x3_reg - t1;
        y7_reg = y3_reg - t2;
        x3_reg = x3_reg + t1;
        y3_reg = y3_reg + t2;
    }

    sfg read_us{
        u1 = i0_sig;
        u2 = i1_sig;
    }
    sfg scale{
        y0_reg = y0_reg >> 3;
        y1_reg = y1_reg >> 3;
        y2_reg = y2_reg >> 3;
        y3_reg = y3_reg >> 3;
        y4_reg = y4_reg >> 3;
        y5_reg = y5_reg >> 3;
        y6_reg = y6_reg >> 3;
        y7_reg = y7_reg >> 3;
        x0_reg = x0_reg >> 3;
        x1_reg = x1_reg >> 3;
        x2_reg = x2_reg >> 3;
        x3_reg = x3_reg >> 3;
        x4_reg = x4_reg >> 3;
        x5_reg = x5_reg >> 3;
        x6_reg = x6_reg >> 3;
        x7_reg = x7_reg >> 3;
    }

    sfg write_x{
        o0_reg = x0_reg;
        o1_reg = x1_reg;
        o2_reg = x2_reg;
        o3_reg = x3_reg;
        o4_reg = x4_reg;
        o5_reg = x5_reg;
        o6_reg = x6_reg;
        o7_reg = x7_reg;
        $display("o0=", o0_reg, " o1=", o1_reg, " o2=", o2_reg, " o3=", o3_reg, " o4=", o4_reg, " o5=", o5_reg, " o6=" ,o6_reg, " o7=", o7_reg);


    }

    sfg write_y{
        o0_reg = y0_reg;
        o1_reg = y1_reg;
        o2_reg = y2_reg;
        o3_reg = y3_reg;
        o4_reg = y4_reg;
        o5_reg = y5_reg;
        o6_reg = y6_reg;
        o7_reg = y7_reg;
        $display("o0=", o0_reg, " o1=", o1_reg, " o2=", o2_reg, " o3=", o3_reg, " o4=", o4_reg, " o5=", o5_reg, " o6=" ,o6_reg, " o7=", o7_reg);
    }

    sfg done{
        // ack_reg = 20;
        // req_reg = 0;
        $display(0);
    }
}

fsm fft_controller(fft_dp){
    initial s0;
    state s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11,s12,s13,s14,s15,s16,s17,s18,s19,s20,s21,s22,s23,s24,s25,s26,s500;

    @s0 if(req_reg) then (read_x , ack1) -> s1;
        else(ack0) ->s0;
    @s1 if(~req_reg) then (read_y , ack2) -> s2;
        else(ack1) ->s1;
    @s2 (sort) -> s3;
    @s3 if(req_reg) then (read_us , ack2) -> s4;
    else(ack2) ->s3;
    // loop l j i
    @s4 (loop_000 , ack2) -> s5;
    @s5 (loop_002 , ack2) -> s6;
    @s6 (loop_004 , ack2) -> s7;
    @s7 (loop_006 , ack3) -> s8;
    @s8 if(~req_reg) then (read_us , ack3) -> s9;
        else(ack3) ->s8;
    @s9 (loop_100 , ack3) -> s10;
    @s10 (loop_104 , ack4) -> s11;
    @s11 if(req_reg) then (read_us , ack4) -> s12;
    else(ack4) ->s11;
    @s12 (loop_111 , ack4) -> s13;
    @s13 (loop_115 , ack5) -> s14;
    @s14 if(~req_reg) then (read_us , ack5) -> s15;
    else(ack5) ->s14;
    @s15 (loop_200 , ack6) -> s16;
    @s16 if(req_reg) then (read_us , ack6) -> s17;
    else(ack6) ->s16;
    @s16 (loop_211 , ack7) -> s17;
    @s17 if(~req_reg) then (read_us , ack7) -> s18;
    else(ack7) ->s17;
    @s18 (loop_222 , ack8) -> s19;
    @s19 if(req_reg) then (read_us , ack8) -> s20;
    else(ack8) ->s19;
    @s20 (loop_233 , ack9) -> s21;
    @s21 (scale, ack9)->s22;
    @s22 (write_x, ack9)->s26;
    @s26 (ack10) -> s23;
    @s23 if(~req_reg) then (write_y,ack10) -> s24;
    else(ack10) -> s23;
    @s24 (ack11) -> s25;
    @s25 if(req_reg) then (ack11) -> s500;
    else(ack11) -> s25;
    @s500 (done) -> s500;

    
}

system S {
	fft_dp;
}